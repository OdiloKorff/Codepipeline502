name: nightly-latency
on:
  schedule:
    - cron: '0 0 * * *'
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - run: pip install poetry
      - run: poetry install --only main --no-interaction --no-ansi

  cold-start:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Measure cold start
        shell: bash
        run: |
          ts0=$(date +%s%3N)
          docker run --rm ghcr.io/${{ github.repository }}:${{ github.sha }} --help >/dev/null
          ts1=$(date +%s%3N)
          delta=$((ts1-ts0))
          echo "Cold start: ${delta} ms"
          if [ $delta -gt 2000 ]; then
            echo "::error::Cold start exceeded threshold"
            exit 1
          fi
      - name: Cleanup
        if: always()
        run: docker rm -f cp || true

  csv-diff:
    needs: cold-start
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Compare latency CSV
        env:
          YESTERDAY_CSV_URL: ${{ secrets.YESTERDAY_CSV_URL }}
          TODAY_CSV_URL: ${{ secrets.TODAY_CSV_URL }}
        run: python scripts/compare_latency.py

  metrics-smoke:
    needs: csv-diff
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Metrics smoke test
        run: |
          for i in $(seq 1 15); do
            code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/metrics || true)
            if [[ "$code" == "200" ]]; then exit 0; fi
            sleep 1
          done
          echo "::error::/metrics not ready after 15s"
          exit 1

  grafana-provision:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install requests
        run: pip install requests
      - name: Import Grafana dashboards
        env:
          GRAFANA_URL: ${{ secrets.GRAFANA_URL }}
          GRAFANA_API_TOKEN: ${{ secrets.GRAFANA_API_TOKEN }}
        run: python devops/grafana/grafana-api.py
