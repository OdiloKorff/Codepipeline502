name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    - cron: '0 5 * * *'  # 05:00 UTC Daily health run

permissions:
  contents: read
  pull-requests: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_DEFAULT: '3.12'
  PACKAGE_DIR: '.'

jobs:
  setup-matrix:
    runs-on: ubuntu-latest
    outputs:
      py: ${{ steps.set.outputs.matrix }}
    steps:
      - id: set
        run: echo 'matrix=["3.10","3.11","3.12"]' >> $GITHUB_OUTPUT

  test:
    needs: setup-matrix
    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJson(needs.setup-matrix.outputs.py) }}
    runs-on: ubuntu-latest
    timeout-minutes: 25
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
            python-version: ${{ matrix.python-version }}
            cache: 'pip'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest pytest-cov

      - name: Run tests
        run: pytest -q --maxfail=1 --disable-warnings --cov=./ --cov-report=xml --cov-report=term

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          fail_ci_if_error: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  build:
    needs: test
    runs-on: ubuntu-latest
    if: ${{ always() && needs.test.result == 'success' }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_DEFAULT }}
          cache: 'pip'
      - name: Build package
        run: |
          pip install build
          python -m build --wheel --sdist
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/*
          if-no-files-found: error

  smoke:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_DEFAULT }}
      - name: Install built wheel
        run: pip install $(ls dist/*.whl | head -n1)
      - name: Import test
        run: python -c 'import pkgutil,sys;print("Packages:",[m.name for m in pkgutil.iter_modules()][:5])'

  security-scan:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_DEFAULT }}
          cache: 'pip'
      - name: Install
        run: pip install --upgrade pip safety bandit
      - name: Safety
        run: pip freeze > requirements.lock && safety check -r requirements.lock || true
      - name: Bandit
        run: bandit -r . -x tests || true

  summary:
    needs: [ test, build, smoke, security-scan ]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: CI Summary
        run: |
          echo '### CI Result Matrix' >> $GITHUB_STEP_SUMMARY
          echo "*Tests:* ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "*Build:* ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "*Smoke:* ${{ needs.smoke.result }}" >> $GITHUB_STEP_SUMMARY
          echo "*Security:* ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY