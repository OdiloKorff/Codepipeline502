name: CI

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  workflow_dispatch: {}

jobs:
  tests:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # notwendig f√ºr git describe in version.py (Tags sichtbar)

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install -e .[test]

      - name: List test files
        run: |
          echo "Available test files:"
          find . -name "test_*.py" -type f | head -20
          echo "Test directory structure:"
          ls -la tests/ || echo "No tests directory found"

      - name: Run tests
        env:
          JWT_SECRET: testsecret
          OPENAI_API_KEY: dummy-key-for-tests
        run: |
          # Run pytest with explicit options and test discovery
          python -m pytest tests/ \
            --cov=codepipeline \
            --cov-report=xml \
            --cov-report=term-missing \
            --maxfail=1 \
            --disable-warnings \
            -v

      - name: Upload coverage.xml
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.python-version }}
          path: coverage.xml
          retention-days: 7

  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: pip

      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort

      - name: Run linting
        run: |
          # Run flake8 with more lenient settings for now
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --max-line-length=120 || true
          black --check . || true
          isort --check-only . || true