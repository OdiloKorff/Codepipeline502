name: AI Orchestrator (MVP)

on:
  workflow_dispatch:
    inputs:
      goal:
        description: "Ziel/Problem: Was soll gebaut werden?"
        required: true
        type: string
        default: "FastAPI Service für Berechnungen"
      acceptance:
        description: "Akzeptanzkriterien (testbar)"
        required: true
        type: string
        default: "GET /health returns 200; POST /calc works"
      constraints:
        description: "Constraints & Nicht-Ziele"
        required: false
        type: string
        default: "FastAPI only, no UI, coverage ≥80%"
      pattern:
        description: "Blueprint/Pattern"
        required: true
        type: choice
        options: [fastapi-api, cli-tool, worker-etl]
        default: "fastapi-api"
      service_name:
        description: "Service/Package-Name"
        required: true
        type: string
        default: "my-service"
      spec_json:
        description: "Spec payload (raw JSON) - DEPRECATED"
        required: false
        type: string
      spec_b64:
        description: "Spec payload (base64-encoded UTF-8 JSON) - DEPRECATED"
        required: false
        type: string
  issues:
    types: [labeled]

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: ai-orchestrator-${{ github.ref }}
  cancel-in-progress: true

jobs:
  run:
    if: >
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'issues' && contains(github.event.label.name, 'ai:build'))
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install minimal tooling
        run: |
          python -m pip install -U pip
          python -V

      - name: Configure git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Orchestrate (tools/ai_build.py)
        env:
          SPEC_FILE: spec.json
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          # Build clean JSON from separate inputs
          python -c "
          import json, os
          spec = {
              'goal': '${{ inputs.goal }}',
              'acceptance': '${{ inputs.acceptance }}', 
              'constraints': '${{ inputs.constraints }}',
              'pattern': '${{ inputs.pattern }}',
              'service_name': '${{ inputs.service_name }}'
          }
          with open('$SPEC_FILE', 'w', encoding='utf-8') as f:
              json.dump(spec, f, indent=2, ensure_ascii=False)
          "
          python tools/ai_build.py

      - name: Create PR (fallback via API)
        uses: actions/github-script@v7
        with:
          script: |
            const {owner, repo} = context.repo;
            const branches = await github.paginate(github.rest.repos.listBranches, { owner, repo, per_page: 100 });
            const ai = branches
              .filter(b => b.name && b.name.startsWith('feat/ai-'))
              .map(b => ({ name: b.name, sha: b.commit?.sha }))
              .filter(b => b.sha);
            if (ai.length === 0) {
              core.notice("Kein 'feat/ai-' Branch gefunden – ggf. keine Änderungen.");
              return;
            }
            const withDates = [];
            for (const b of ai) {
              try {
                const commit = await github.rest.repos.getCommit({ owner, repo, ref: b.sha });
                withDates.push({ name: b.name, date: new Date(commit.data.commit.author.date).getTime() });
              } catch (e) {
                core.notice(`Commit-Abfrage fehlgeschlagen für ${b.name}: ${e.message}`);
              }
            }
            if (withDates.length === 0) {
              core.notice("Keine datierten Commits gefunden.");
              return;
            }
            withDates.sort((a,b) => a.date - b.date);
            const head = withDates[withDates.length - 1].name;

            const prs = await github.paginate(github.rest.pulls.list, { owner, repo, state: 'open', head: `${owner}:${head}` });
            if (prs.length > 0) {
              core.summary.addRaw(`Offener PR existiert bereits für **${head}**: ${prs[0].html_url}`).write();
              return;
            }

            const pr = await github.rest.pulls.create({
              owner, repo, head, base: 'main',
              title: `AI Build: ${head}`,
              body: 'Automatischer Build (siehe PLAN.md / $GITHUB_STEP_SUMMARY). Bitte QA-Checks abwarten (Score ≥ 95).'
            });
            core.summary.addRaw(`PR erstellt: ${pr.data.html_url}`).write();

      - name: Summary
        if: always()
        run: |
          echo "### AI Orchestrator" >> $GITHUB_STEP_SUMMARY
          echo "- Event: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY